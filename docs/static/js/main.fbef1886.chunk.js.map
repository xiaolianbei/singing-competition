{"version":3,"sources":["@history/history.js","app/AppContext.js","app/main/errors/404.js","app/main/home/auth.js","app/main/home/loginMutation.js","app/main/home/HomeView.js","app/main/home/HomeController.js","app/main/list/View.js","app/main/list/ListController.js","app/main/MainConfigs.js","app/configs/RoutesConfig.js","app/layout/Layout.js","app/utils/MongodbGraphQLClient.js","app/App.js","store/index.js","serviceWorker.js","index.js"],"names":["history","AppContext","React","createContext","error404","className","useAuthToken","useCookies","cookies","setCookie","removeCookie","authToken","loginMutationGQL","gql","HomeView","props","useHistory","setAuthToken","removeAuthtoken","useMutation","onCompleted","data","login","token","push","mutation","email","code","variables","useLoginMutation","loginMutation","loginMutationResults","useForm","shouldUseNativeValidation","handleSubmit","register","disableForm","loading","class","id","data-aos","data-aos-delay","warning","style","onSubmit","values","type","name","placeholder","required","disabled","HomeController","isWarning","URLSearchParams","useLocation","search","get","View","Config","settings","layout","routes","path","component","home","appsConfigs","exact","homePage","to","Layout","Consumer","renderRoutes","app","Realm","getValidAccessToken","a","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","link","HttpLink","uri","fetch","options","headers","Authorization","cache","InMemoryCache","App","Provider","value","loggerMiddleware","createLogger","store","createStore","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbef1886.chunk.js","sourcesContent":["import * as history from 'history';\n\nexport default history.createBrowserHistory();\n\n\n//https://github.com/ReactTraining/history/blob/master/docs/GettingStarted.md","import React from 'react';\n\nconst AppContext = React.createContext({});\n\nexport default AppContext;\n","import React from 'react';\n\nfunction error404() {\n  return (\n    <div className=\"App\">\n      <p>Page No Found</p>\n    </div>\n  );\n}\n\nexport default error404;\n","import { useApolloClient } from \"@apollo/react-hooks\";\nimport { useCookies } from \"react-cookie\";\n\nconst TOKEN_NAME = \"authToken\";\n\n// custom hook to handle authToken - we use compositon to decouple the auth system and it's storage\nexport const useAuthToken = () => {\n  const [cookies, setCookie, removeCookie] = useCookies([TOKEN_NAME]);\n  const setAuthToken = (authToken) => setCookie(TOKEN_NAME, authToken);\n  const removeAuthToken = () => removeCookie(TOKEN_NAME);\n  return [cookies[TOKEN_NAME], setAuthToken, removeAuthToken];\n};\n\nexport const useLogout = () => {\n  const [, , removeAuthToken] = useAuthToken();\n  const apolloClient = useApolloClient();\n\n  const logout = async () => {\n    await apolloClient.clearStore(); // we remove all information in the store\n    removeAuthToken();\n  };\n  return logout;\n};","import gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useAuthToken } from \"./auth\";\nimport { useHistory } from 'react-router-dom';\n\nexport const loginMutationGQL = gql`\n  mutation login($email: String!, $code: String!) {\n    login(input: { email: $email,code:$code }) {\n      token\n    }\n  }\n`;\n\nexport const useLoginMutation = () => {\n  \n  let history = useHistory();\n\n  const [_, setAuthToken, removeAuthtoken] = useAuthToken();\n\n  const [mutation, mutationResults] = useMutation(loginMutationGQL, {\n    onCompleted: (data) => {\n      if(data.login!==null){\n        setAuthToken(data.login.token);\n        let path = `/list`;\n        history.push(path);\n      }else{\n        let path = `/?warning`;\n        history.push(path);\n      }\n    },\n  });\n\n  // full login function\n  const login = (email, code) => {\n    removeAuthtoken();\n    return mutation({\n      variables: {\n        email: email,\n        code: code,\n      },\n    });\n  }\n  return [login, mutationResults]\n};","import { useForm } from \"react-hook-form\";\nimport React from \"react\";\nimport { useLoginMutation } from \"./loginMutation\";\n\nfunction HomeView(props) {\n\n const [loginMutation, loginMutationResults] = useLoginMutation();\n\n const { handleSubmit, register } = useForm({ shouldUseNativeValidation: true });\n\n const disableForm = loginMutationResults.loading;\n\n const onSubmit = (values) => loginMutation(values.email, values.code);\n\n  return (\n  \t  <section class=\"hero d-flex flex-column justify-content-center align-items-center\" id=\"home\">\n            <div class=\"bg-overlay\"></div>\n               <div class=\"container\">\n                    <div class=\"row\">\n                         <div class=\"col-lg-8 col-md-10 mx-auto col-12\">\n                              <div class=\"hero-text mt-5 text-center\">\n\n                                    <h6 data-aos=\"fade-up\" data-aos-delay=\"300\">Welcome to NAAAC-North America Alumni Alliance Cup Singing Competition Ranking System</h6>\n                                    <h1 class=\"text-white\" data-aos=\"fade-up\" data-aos-delay=\"500\">NAAAC</h1>\n                            {props.warning ? (<h6 data-aos=\"fade-up\" data-aos-delay=\"400\" style={{\"color\":\"red\"}}>Email or Code is incorrect!</h6>) : \"\"}\n                            <form  onSubmit={handleSubmit(onSubmit)}>>\n                              <input type=\"email\" class=\"form-control\" name=\"cf-name\" placeholder=\"Email\"   {...register(\"email\",{ required: \"Please enter your email.\" })}  />\n                              <input type=\"text\" class=\"form-control\" name=\"cf-email\" placeholder=\"Code\"  {...register(\"code\",{ required: \"Please enter your code.\" })} />\n                              <button disabled={disableForm} type=\"submit\" class=\"form-control\" id=\"submit-button\" name=\"submit\">Sign in </button>\n                            </form>\n                              </div>\n                             \n                         </div>\n\n                    </div>\n               </div>\n     </section>\n  );\n}\n\nexport default HomeView;\n","import React from \"react\";\nimport {  useLocation} from \"react-router-dom\";\nimport View from \"./HomeView\"\n\nfunction HomeController(props) {\n\tlet query = new URLSearchParams(useLocation().search);\n\tlet isWarning =  query.get(\"warning\") === null\n  return  <View warning={!isWarning}/>\n}\nexport default HomeController;","import React from \"react\";\n\nfunction View(props) {\n\n  return (\n  \t  <section class=\"d-flex flex-column justify-content-center align-items-center\">\n            <div class=\"bg-overlay\"></div>\n               <div class=\"container\">\n                    <div class=\"row\">\n                         <div class=\"col-lg-8 col-md-10 mx-auto col-12\">\n                              <div class=\"hero-text mt-5 text-center\">\n                                  <h1 class=\"text-white\" data-aos=\"fade-up\" data-aos-delay=\"500\">This is list page</h1>\n                              </div>\n                             \n                         </div>\n\n                    </div>\n               </div>\n     </section>\n  );\n}\n\nexport default View;\n","import React from \"react\";\nimport View from \"./View\"\n\nfunction HomeController(props) {\n  return  <View/>\n}\nexport default HomeController;","import error404 from './errors/404';\nimport home from './home/HomeController';\nimport list from './list/ListController';\n\n\nconst Config = {\n\tsettings: {\n\t\tlayout: {}\n\t},\n\troutes: [\n\t\t{\n\t\t\tpath: '/home',\n\t\t\tcomponent: home\n\t\t},\n\t\t{\n\t\t\tpath: '/list',\n\t\t\tcomponent: list\n\t\t},\n\t\t{\n\t\t\tpath: '/errors/404',\n\t\t\tcomponent: error404\n\t\t}\n\t]\n};\n\nexport default Config;\n","import React from 'react';\nimport appsConfigs  from '../main/MainConfigs';\nimport { Redirect } from 'react-router-dom';\nimport homePage from '../main/home/HomeController';\n\nconst routes = [\n\t...appsConfigs.routes,\n\t{\n\t\tpath: '/',\n\t\texact: true,\n\t\tcomponent: homePage\n\t},\n\t{\n\t\tcomponent: () => <Redirect to=\"/errors/404\" />\n\t}\n];\n\nexport default routes;\n","import React from 'react';\nimport AppContext from '../AppContext';\nimport { renderRoutes} from 'react-router-config';\nimport {\n  HashRouter,\n} from \"react-router-dom\";\n\n\nfunction Layout(props) {\n  return (\n       <AppContext.Consumer>\n        {({ routes }) => (\n      <div >\n          <HashRouter>\n             {\n              renderRoutes(routes)\n             }\n              </HashRouter>\n      </div>\n        )}\n    </AppContext.Consumer>\n  );\n}\n\nexport default Layout;","import * as Realm from \"realm-web\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nexport const APP_ID = \"naaac-app-ugrsu\";\n\nconst graphqlUri = `https://us-west-2.aws.realm.mongodb.com/api/client/v2.0/app/naaac-app-ugrsu/graphql`\n// Local apps should use a local URI!\n// const graphqlUri = `https://us-east-1.aws.stitch.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`\n// const graphqlUri = `https://eu-west-1.aws.stitch.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`\n// const graphqlUri = `https://ap-southeast-1.aws.stitch.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`\n// Connect to your MongoDB Realm app\nconst app = new Realm.App(APP_ID);\n\n\n// Gets a valid Realm user access token to authenticate requests\nasync function getValidAccessToken() {\n  // Guarantee that there's a logged in user with a valid access token\n  if (!app.currentUser) {\n    // If no user is logged in, log in an anonymous user. The logged in user will have a valid\n    // access token.\n    await app.logIn(Realm.Credentials.anonymous());\n  } else {\n    // An already logged in user's access token might be stale. To guarantee that the token is\n    // valid, we refresh the user's custom data which also refreshes their access token.\n    await app.currentUser.refreshCustomData();\n  }\n  return app.currentUser.accessToken\n}\n\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: graphqlUri,\n    // We define a custom fetch handler for the Apollo client that lets us authenticate GraphQL requests.\n    // The function intercepts every Apollo HTTP request and adds an Authorization header with a valid\n    // access token before sending the request.\n    fetch: async (uri, options) => {\n      const accessToken = await getValidAccessToken();\n      options.headers.Authorization = `Bearer ${accessToken}`;\n      return fetch(uri, options);\n    },\n  }),\n  cache: new InMemoryCache(),\n});\n\nexport default client;","import history from '../@history';\nimport React from 'react';\nimport { Router } from 'react-router-dom';\nimport AppContext from './AppContext';\nimport routes from './configs/RoutesConfig';\nimport Layout from './layout/Layout';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from './utils/MongodbGraphQLClient'\n\nconst App = () => {\n\treturn (\n\t<ApolloProvider client={client}>\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\troutes\n\t\t\t}}\n\t\t>\n\t\t\t<Router history={history}>\n\t\t\t\t\t<Layout />\n\t\t\t\t</Router>\n\t\t</AppContext.Provider>\n\t</ApolloProvider>\n\t)\n};\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\n\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  applyMiddleware(ReduxThunk, loggerMiddleware),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Internet Explorer 11 requires polyfills and partially supported by this project.\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    \t<App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}